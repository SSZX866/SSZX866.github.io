

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://sszx866.github.io/</id>
  <title>伸手摘星</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2021-04-22T11:56:32+08:00</updated>
  <author>
    <name>Weijia Li</name>
    <uri>https://sszx866.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://sszx866.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en-US"
    href="https://sszx866.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Weijia Li </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>前缀和</title>
    <link href="https://sszx866.github.io/posts/%E5%89%8D%E7%BC%80%E5%92%8C/" rel="alternate" type="text/html" title="前缀和" />
    <published>2021-04-22T11:55:00+08:00</published>
  
    <updated>2021-04-22T11:55:00+08:00</updated>
  
    <id>https://sszx866.github.io/posts/%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <content src="https://sszx866.github.io/posts/%E5%89%8D%E7%BC%80%E5%92%8C/" />
    <author>
      <name>Weijia Li</name>
    </author>

  
    
    <category term="LeetCode" />
    
    <category term="Python" />
    
  

  
    <summary>
      





      Python

一、前缀和

前缀和是一个数组的某项下标之前(包括此项元素)的所有数组元素的和。

设 b[] 为前缀和数组，a[] 为原数组，根据这句话可以得到前缀和的定义式和递推式：


  
    
       
      定义式
      递推式
    
  
  
    
      一维前缀和
      
      
    
    
      二维前缀和
      
      
    
  


当需要我们求「某一段」区域的和的时候，我们要很自然的想到「前缀和」。

前缀和的作用就是为了帮助我们快速求某一段的和，是「差分」的逆运算。

前缀和数组 sum 的每一位记录的是当前位置距离起点位置，这连续一段的和区间和。

因此当我们要求特定的一段 [i,j] 的区域和的时候，可以直接利用前缀和数组快速求解：ans = sum[j] - sum[i ...
    </summary>
  

  </entry>

  
  <entry>
    <title>双指针</title>
    <link href="https://sszx866.github.io/posts/%E5%8F%8C%E6%8C%87%E9%92%88/" rel="alternate" type="text/html" title="双指针" />
    <published>2021-04-19T20:55:00+08:00</published>
  
    <updated>2021-04-19T20:55:00+08:00</updated>
  
    <id>https://sszx866.github.io/posts/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <content src="https://sszx866.github.io/posts/%E5%8F%8C%E6%8C%87%E9%92%88/" />
    <author>
      <name>Weijia Li</name>
    </author>

  
    
    <category term="LeetCode" />
    
    <category term="Python" />
    
  

  
    <summary>
      





      集中常见的双指针技巧

一、对撞指针

对撞指针一般用在有序数组中，将指向左侧的索引定义为左指针(left)，右侧的定义为右指针(right)，然后从两头向中间进行数组遍历，结束条件为两指针相遇。

二分算法

二分算法是对撞指针典型应用

def lower_bound(array, left, right, target):  # 求非降序范围[left, right)内第一个不小于target的值的位置
    while left &amp;lt; right:  # 搜索区间[left, right)不为空
        mid = left + (right - left) // 2  # 防溢出
        if array[mid] &amp;lt; target:
            left = mid + 1
        else:
            rig...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python-heapq</title>
    <link href="https://sszx866.github.io/posts/heapq/" rel="alternate" type="text/html" title="Python-heapq" />
    <published>2021-04-18T20:55:00+08:00</published>
  
    <updated>2021-04-18T20:55:00+08:00</updated>
  
    <id>https://sszx866.github.io/posts/heapq/</id>
    <content src="https://sszx866.github.io/posts/heapq/" />
    <author>
      <name>Weijia Li</name>
    </author>

  
    
    <category term="Code" />
    
    <category term="Python" />
    
  

  
    <summary>
      





      Python-heapq

一、堆(heap)

二叉树堆是一棵完全二叉树，分为最大堆与最小堆。（ heapq库中的堆默认是最小堆）

最大堆，树种各个父节点的值总是大于或等于任何一个子节点的值。

最小堆，树种各个父节点的值总是小于或等于任何一个子节点的值。

我们一般使用二叉堆来实现优先级队列,它的内部调整算法复杂度为logN。

堆是一个二叉树，其中最小堆每个父节点的值都小于或等于其所有子节点的值。

整个最小堆的最小元素总是位于二叉树的根节点.



二叉堆可以很容易用数组列表来表示，因为一棵高度为h的完全二叉树有2^h到2^(h+1)-1个节点，这样存放一个二叉堆就不会太浪费空间，而且一旦知道高度，就可以知道节点数的范围。

python的heapq模块提供了对堆的支持。 heapq堆数据结构最重要的特征是heap[0]永远是最小的元素

二、常用方法

heappush(...
    </summary>
  

  </entry>

  
  <entry>
    <title>Selenium</title>
    <link href="https://sszx866.github.io/posts/Selenium/" rel="alternate" type="text/html" title="Selenium" />
    <published>2021-03-25T10:16:00+08:00</published>
  
    <updated>2021-03-25T10:16:00+08:00</updated>
  
    <id>https://sszx866.github.io/posts/Selenium/</id>
    <content src="https://sszx866.github.io/posts/Selenium/" />
    <author>
      <name>Weijia Li</name>
    </author>

  
    
    <category term="Code" />
    
    <category term="Python" />
    
  

  
    <summary>
      





      Selenium

一、CSS Selector

‘&amp;gt;’ 和 ‘空格’    ‘ &amp;gt;’ 表示子节点，’空格’ 表示后代

’#’表示id ‘.’表示css ‘,’ 组选择器可选取多个元素且优先级最低

:nth-child(x) 选取第x个子节点

:nth-last-child(x) 选取倒数第x个子节点

span:nth-of-type(1) 选取第一个标签为span的节点

span:nth-last-of-type(1) 选取倒数第一个标签为span的节点

#t1 :nth-child(odd/even) 选取id为t1下的奇数/偶数子节点

#t1 p:nth-child(odd/even) 选取id为t1下的标签为p的奇数/偶数节点

h3 + span 选取所有与h3相邻（兄弟）的span节点

h3 ~ span 选取所有在h3后所有的span节点（...
    </summary>
  

  </entry>

  
  <entry>
    <title>Appium</title>
    <link href="https://sszx866.github.io/posts/Appium/" rel="alternate" type="text/html" title="Appium" />
    <published>2021-03-23T16:22:00+08:00</published>
  
    <updated>2021-03-23T16:22:00+08:00</updated>
  
    <id>https://sszx866.github.io/posts/Appium/</id>
    <content src="https://sszx866.github.io/posts/Appium/" />
    <author>
      <name>Weijia Li</name>
    </author>

  
    
    <category term="Code" />
    
    <category term="Python" />
    
  

  
    <summary>
      





      Selenium

一、获取adb包名和activity

在cmd中执行

adb shell dumpsys activity recents | find "intent={"


会显示如下，最近的 几个 activity 信息，

intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=tv.danmaku.bili/.ui.splash.SplashActivity}
intent={act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000300cmp=com.huawei.android.launcher/.unihome.UniHome...
    </summary>
  

  </entry>

</feed>


