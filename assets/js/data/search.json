[
  
  {
    "title": "记忆化搜索",
    "url": "/posts/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/",
    "categories": "Code, Python",
    "tags": "Python",
    "date": "2021-04-24 19:55:00 +0800",
    





    "snippet": "记忆化搜索一、记忆化搜索与递归1、使用递归来计算斐波那契数列递归过程中，有许多的结果是被反复计算的，这样会大大降低算法的执行效率。我们用最简单的斐波那契数列来举例，如果使用递归来解，当输入数据变得很大时，花费的时间呈现指数级别的增长。import timedef recur(n):    if n &amp;lt; 2: return 1    return recur(n - 1) + recur(n - 2)t1 = time.time()print(recur(35)) # 14930352print(time.time() - t1) # 3.02336621284484862、..."
  },
  
  {
    "title": "前缀和",
    "url": "/posts/%E5%89%8D%E7%BC%80%E5%92%8C/",
    "categories": "LeetCode, Python",
    "tags": "Python, LeetCode",
    "date": "2021-04-22 11:55:00 +0800",
    





    "snippet": "一、前缀和前缀和是一个数组的某项下标之前(包括此项元素)的所有数组元素的和。设 b[] 为前缀和数组，a[] 为原数组，根据这句话可以得到前缀和的定义式和递推式：                   定义式      递推式                  一维前缀和                          二维前缀和                  当需要我们求「某一段」区域的和的时候，我们要很自然的想到「前缀和」。前缀和的作用就是为了帮助我们快速求某一段的和，是「差分」的逆运算。前缀和数组 sum 的每一位记录的是当前位置距离起点位置，这连续一段的和区间和。因此当我们要..."
  },
  
  {
    "title": "双指针",
    "url": "/posts/%E5%8F%8C%E6%8C%87%E9%92%88/",
    "categories": "LeetCode, Python",
    "tags": "Python, LeetCode",
    "date": "2021-04-19 20:55:00 +0800",
    





    "snippet": "集中常见的双指针技巧一、对撞指针对撞指针一般用在有序数组中，将指向左侧的索引定义为左指针(left)，右侧的定义为右指针(right)，然后从两头向中间进行数组遍历，结束条件为两指针相遇。二分算法二分算法是对撞指针典型应用def lower_bound(array, left, right, target):  # 求非降序范围[left, right)内第一个不小于target的值的位置    while left &amp;lt; right:  # 搜索区间[left, right)不为空        mid = left + (right - left) // 2  # 防溢出..."
  },
  
  {
    "title": "Python-heapq",
    "url": "/posts/heapq/",
    "categories": "Code, Python",
    "tags": "Python",
    "date": "2021-04-18 20:55:00 +0800",
    





    "snippet": "Python-heapq一、堆(heap)二叉树堆是一棵完全二叉树，分为最大堆与最小堆。（ heapq库中的堆默认是最小堆）最大堆，树种各个父节点的值总是大于或等于任何一个子节点的值。最小堆，树种各个父节点的值总是小于或等于任何一个子节点的值。我们一般使用二叉堆来实现优先级队列,它的内部调整算法复杂度为logN。堆是一个二叉树，其中最小堆每个父节点的值都小于或等于其所有子节点的值。整个最小堆的最小元素总是位于二叉树的根节点.二叉堆可以很容易用数组列表来表示，因为一棵高度为h的完全二叉树有2^h到2^(h+1)-1个节点，这样存放一个二叉堆就不会太浪费空间，而且一旦知道高度，就可以知道节点..."
  },
  
  {
    "title": "Selenium",
    "url": "/posts/Selenium/",
    "categories": "Code, Python",
    "tags": "Python",
    "date": "2021-03-25 10:16:00 +0800",
    





    "snippet": "Selenium一、CSS Selector‘&amp;gt;’ 和 ‘空格’    ‘ &amp;gt;’ 表示子节点，’空格’ 表示后代’#’表示id ‘.’表示css ‘,’ 组选择器可选取多个元素且优先级最低:nth-child(x) 选取第x个子节点:nth-last-child(x) 选取倒数第x个子节点span:nth-of-type(1) 选取第一个标签为span的节点span:nth-last-of-type(1) 选取倒数第一个标签为span的节点#t1 :nth-child(odd/even) 选取id为t1下的奇数/偶数子节点#t1 p:nth-child(odd..."
  },
  
  {
    "title": "Appium",
    "url": "/posts/Appium/",
    "categories": "Code, Python",
    "tags": "Python",
    "date": "2021-03-23 16:22:00 +0800",
    





    "snippet": "Selenium一、获取adb包名和activity在cmd中执行adb shell dumpsys activity recents | find &quot;intent={&quot;会显示如下，最近的 几个 activity 信息，intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=tv.danmaku.bili/.ui.splash.SplashActivity}intent={act=android.intent.action.MAIN..."
  },
  
  {
    "title": "Scrapy",
    "url": "/posts/Scrapy/",
    "categories": "Code, Python",
    "tags": "Python",
    "date": "2021-03-13 18:32:00 +0800",
    





    "snippet": "Scrapy      创建工程  scrapy startproject &amp;lt;name&amp;gt;      创建爬虫  scrapy genspider &amp;lt;name&amp;gt; &amp;lt;domain&amp;gt;      运行爬虫  scrapy crawl &amp;lt;spider&amp;gt;      列出所有爬虫  scrapy list主要修改 settings.py name.py pipelines.py三个文件"
  },
  
  {
    "title": "Linux",
    "url": "/posts/Linux/",
    "categories": "Technology",
    "tags": "Technology",
    "date": "2021-02-13 18:32:00 +0800",
    





    "snippet": "Linux1.进程的前台、后台转换点击这里，看视频讲解，学习下面内容Linux终端通过Shell程序来接收用户输入的命令，并且执行命令。我们在Shell里正在执行的，和用户进行人机交互的进程叫 前台进程 (foreground process)前台进程可以接收键盘输入并将结果显示在显示器上。用户敲入什么命令，shell就会启动对应的程序，运行在 前台 。比如，大家可以用vi 编写一个 下面的Python程序到 Linux主机上，代码文件名可以为t1.pywhile True:        info = raw_input(&quot;please input something:&qu..."
  },
  
  {
    "title": "Python学习笔记",
    "url": "/posts/Python/",
    "categories": "Code, Python",
    "tags": "Python",
    "date": "2021-02-07 18:32:00 +0800",
    





    "snippet": "Python学习笔记1、内置函数（Built-in Functions）set()set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。参数说明：  iterable – 可迭代对象对象；&amp;gt;&amp;gt;&amp;gt;x = set(&#39;runoob&#39;)&amp;gt;&amp;gt;&amp;gt; y = set(&#39;google&#39;)&amp;gt;&amp;gt;&amp;gt; x, y(set([&#39;b&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o..."
  },
  
  {
    "title": "Mysql",
    "url": "/posts/Mysql/",
    "categories": "Technology",
    "tags": "Technology",
    "date": "2020-12-19 21:27:00 +0800",
    





    "snippet": "Mysql版本mysql-8.0.22-winx64      启动  mysqld --console      登录  mysql -u root -p#####"
  },
  
  {
    "title": "Markdown快速入门",
    "url": "/posts/Typora/",
    "categories": "Tools",
    "tags": "Tools",
    "date": "2020-09-26 13:27:00 +0800",
    





    "snippet": "Markdown快速入门 (typora)1、快捷键显示大纲：Ctrl+Shift+1显示代码：Ctrl+/2、代码块import numpyprint(&quot;Hello world&quot;)java -jar blog start3、标题一级标题 Ctrl+1二级标题 Ctrl+2三级标题 Ctrl+3四级标题 Ctrl+4五级标题 Ctrl+5六级标题 Ctrl+64、字体加粗 Ctrl+B==代码高亮==删除线 Atl+Shift+5斜体 Ctrl+I下划线 Ctrl+U上标 x^2^下标 H~2~O5、引用  123 Ctrl+Shift+Q      123     ..."
  }
  
]

